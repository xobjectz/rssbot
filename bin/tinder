#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0103,C0413,W0201,W0401,W0614,E0401


"tinder"


import os
import profile
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from rssbot.face import *


from rssbot import modules
from rssbot import user


if os.path.exists("examples"):
    import examples
else:
    examples = None


modules.rss.DEBUG = True


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()
CLI.out   = print


Cfg         = Default()
Cfg.debug   = True
Cfg.mod     = ""
Cfg.name    = "tinder"
Cfg.silent  = False
Cfg.skip    = ["debug",]
Cfg.wdr     = ".test"


Persist.workdir = Cfg.wdr


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dpl = ["hnrss title,url"]
param.fnd = ["log", "todo", "rss", "config"]
param.imp = ["tests/feeds.opml"]
param.log = ["bla"]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews"]
param.pwd = ["bla mekker"]
param.rem = ["hnrss"]
param.res = [""]
param.rss = ["http://hnrss.org/newest",]
param.tdo = ["mekker"]
param.ver = [""]


class CLII(CLI):

    "command line interface."

    def raw(self, txt):
        if "v" in Cfg.opts:
            print(txt)


def consume(evts):
    "wait for events."
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def payload(clt):
    "do payload."
    cmdz = sorted(list(keys(Commands.cmds)))
    with paylock:
        nmr = 0
        for cmdd in cmdz:
            for ex in getattr(param, cmdd, [""]):
                evt = Event()
                evt.channel = "#objr"
                evt.orig = repr(clt)
                evt.txt = cmdd + " " + ex
                evt.type = "command"
                clt.put(evt)
                events.append(evt)
                nmr += 1
        return nmr


def wrap(function):
    "reset terminal."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    "main"
    Logging.out = Errors.out = print
    Cfg.dis = Cfg.sets.dis
    Cfg.mod = ",".join(modnames(modules, user, examples))
    if "v" in Cfg.opts:
        dte = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        print(f'{dte} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    nrs = Cfg.index or 1
    nrcommand = len(Commands.cmds) or 1
    clt = CLII()
    clt.start()
    clt.threaded = "t" in Cfg.opts
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt))
    for thr in thrs:
        thr.join()
    consume(events)
    endtime = time.time()
    lap = laps(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if not Errors.errors:
        if "v" in Cfg.opts:
            print("no errors")
    else:
        errors()
    if "v" in Cfg.opts:
        print(f"{lap} {nrs} {nrcommand} {percall}")


if __name__ == "__main__":
    parse(Cfg, " ".join(sys.argv[1:]))
    if "f" in Cfg.opts:
        if os.path.exists(Persist.workdir):
            shutil.rmtree(Persist.workdir)
    skel()
    if "p" in Cfg.opts:
        profile.runctx(main.__code__, globals(), locals())
    else:
        wrap(main)
    errors()
    sys.exit()
